class Solution(object):
    # def maxArea(self, height):
    #     """
    #     :type height: List[int]
    #     :rtype: int
    #     """
    #     number_of_containers = len(height)
    #     max_water = 0
    #     for row in range(number_of_containers):
    #         for column in range(row + 1, number_of_containers):
    #             distance = column - row
    #             water_amount = distance * min(height[row], height[column])
    #             max_water = max(max_water, water_amount)
    #
    #     return max_water
    # def maxArea(self, height):
    #     """
    #     :type height: List[int]
    #     :rtype: int
    #     """
    #     number_of_containers = len(height)
    #     max_water = 0
    #     left_max = [0]
    #     left_max_index = 1
    #     for index in range(1, number_of_containers):
    #         if height[left_max[left_max_index - 1]] <= height[index]:
    #             left_max.insert(left_max_index, index)
    #         else:
    #             left_max.insert(left_max_index, left_max[left_max_index - 1])
    #         left_max_index += 1
    #
    #     right_max = [number_of_containers - 1] * (number_of_containers - 1)
    #     right_max.insert(number_of_containers - 1, number_of_containers - 1)
    #     right_max_index = number_of_containers - 2
    #     for index in range(number_of_containers - 2, -1, -1):
    #         if height[right_max[right_max_index + 1]] > height[index]:
    #             right_max[right_max_index] = right_max[right_max_index + 1]
    #         else:
    #             right_max[right_max_index] = index
    #         right_max_index -= 1
    #
    #     left_index = 0
    #     right_index = number_of_containers - 1
    #     while left_index < right_index:
    #         left = left_max[left_index]
    #         right = right_max[right_index]
    #         distance = right - left
    #         water_amount = distance * min(height[left], height[right])
    #         max_water = max(max_water, water_amount)
    #
    #         if left_max[left_index] < right_max[right_index]:
    #             left_index += 1
    #         else:
    #             right_index -= 1
    #
    #     return max_water
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        max_water = 0
        number_of_containers = len(height)
        left_index = 0
        right_index = number_of_containers - 1
        while left_index < right_index:
            left = height[left_index]
            right = height[right_index]
            distance = right_index - left_index
            water_amount = distance * min(left, right)
            max_water = max(max_water, water_amount)

            if height[left_index] < height[right_index]:
                left_index += 1
            else:
                right_index -= 1

        return max_water


water = Solution().maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7])
# water = Solution().maxArea([1, 2, 4, 3])
print(water)
